{
  "swagger": "2.0",
  "info": {
    "description": "This API manages users, authentication, and posts.",
    "version": "1.0.0",
    "title": "Express API",
    "contact": {
      "email": "test@gmail.com"
    }
  },
  "host": "0.0.0.0:3000",
  "tags": [
    {
      "name": "user",
      "description": "Operations about user"
    },
    {
      "name": "auth",
      "description": "Operations about authentication"
    },
    {
      "name": "posts",
      "description": "Operations about posts"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get list of users",
        "description": "Returns a list of users with pagination.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "type": "integer",
            "description": "Page number"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "description": "Number of users per page"
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PrivateUserResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get current user",
        "description": "Retrieves the authenticated user information.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User data",
            "schema": {
              "$ref": "#/definitions/PrivateUserResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update current user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated user",
            "schema": {
              "$ref": "#/definitions/PrivateUserResponse"
            }
          },
          "400": {
            "description": "Invalid data"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete current user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by ID",
        "description": "Returns the details of a specific user based on the provided user ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the user"
          }
        ],
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "User data",
            "schema": { "$ref": "#/definitions/PrivateUserResponse" }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/me/email": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by email",
        "description": "Retrieves the details of a user based on the provided email address of the authenticated user.",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Email address of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "User data found by email",
            "schema": { "$ref": "#/definitions/PrivateUserResponse" }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Register a new user",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PrivateUserResponse"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created",
            "schema": {
              "$ref": "#/definitions/PrivateUserResponse"
            }
          },
          "409": {
            "description": "Email is already in use"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login a user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IUserLoginDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful",
            "schema": {
              "$ref": "#/definitions/TokenResponse"
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logout a user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully logged out"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/posts": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Get list of posts",
        "description": "Returns a list of posts with optional query parameters for pagination.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "type": "number",
            "description": "Page number"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "number",
            "description": "Number of posts per page"
          }
        ],
        "responses": {
          "200": {
            "description": "List of posts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PostResponse"
              }
            }
          },
          "400": {
            "description": "Invalid query parameters"
          }
        }
      },
      "post": {
        "tags": [
          "posts"
        ],
        "summary": "Create a new post",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePostDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Post created",
            "schema": {
              "$ref": "#/definitions/PostResponse"
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/posts/{postId}": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Get post by ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Returns a single post by its ID",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the post"
          }
        ],
        "responses": {
          "200": {
            "description": "Post data",
            "schema": {
              "$ref": "#/definitions/PostResponse"
            }
          },
          "404": {
            "description": "Post not found"
          }
        }
      },
      "put": {
        "tags": [
          "posts"
        ],
        "summary": "Update a post",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the post"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePostDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post updated",
            "schema": {
              "$ref": "#/definitions/PostResponse"
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Post not found"
          }
        }
      },
      "delete": {
        "tags": [
          "posts"
        ],
        "summary": "Delete a post",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the post"
          }
        ],
        "responses": {
          "204": {
            "description": "Post deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Post not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "BearerAuth": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  },
  "definitions": {
    "UpdateUserDTO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "age": {
          "type": "number"
        }
      }
    },
    "PrivateUserResponse": {
      "type": "object",
      "required": [
        "_id",
        "name",
        "email",
        "role",
        "isDeleted",
        "isVerified"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "The unique identifier for a user"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "age": {
          "type": "number"
        },
        "phone": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "enum": [
            "admin",
            "user"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date and time of the user"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date and time of the user"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "isVerified": {
          "type": "boolean"
        }
      }
    },
    "IUserLoginDto": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "TokenResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "refreshToken": {
          "type": "string"
        }
      }
    },
    "PostResponse": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "-userId": {
          "type": "string"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "isVerified": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date and time of the post"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date and time of the post"
        }
      }
    },
    "CreatePostDTO": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "content": {
          "type": "string"
        }
      }
    },
    "UpdatePostDTO": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title of the post"
        },
        "content": {
          "type": "string",
          "description": "Content of the post"
        }
      },
      "required": [
        "title",
        "content"
      ]
    }
  }
}
